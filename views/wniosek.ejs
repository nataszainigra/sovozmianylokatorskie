<%- include('partials/header') %>
<style>
  /* SOVO CRM Styles */
  .sovo-input {
    width: 100%;
    padding: 0.65rem 0.875rem;
    border: 1px solid #d1d5db;
    border-radius: 8px;
    font-size: 0.875rem;
    transition: border-color 0.2s;
  }
  .sovo-input:focus {
    outline: none;
    border-color: #7A0C2E;
    box-shadow: 0 0 0 3px rgba(122, 12, 46, 0.1);
  }
  .sovo-input::placeholder {
    color: #9ca3af;
  }
  .sovo-label {
    display: block;
    font-size: 0.875rem;
    font-weight: 500;
    color: #374151;
    margin-bottom: 0.5rem;
  }
  .sovo-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0,0,0,0.08);
    margin-bottom: 1.5rem;
  }
  .sovo-btn-primary {
    background: #7A0C2E;
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: 600;
    transition: all 0.2s;
    border: none;
    cursor: pointer;
  }
  .sovo-btn-primary:hover {
    background: #5A0821;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(122, 12, 46, 0.2);
  }
  .sovo-btn-secondary {
    background: white;
    color: #7A0C2E;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: 600;
    border: 2px solid #7A0C2E;
    transition: all 0.2s;
    cursor: pointer;
  }
  .sovo-btn-secondary:hover {
    background: #FFF5F7;
  }
  .sovo-btn-small {
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    border-radius: 6px;
    border: 1px solid #d1d5db;
    background: white;
    transition: all 0.2s;
    cursor: pointer;
  }
  .sovo-btn-small:hover {
    border-color: #7A0C2E;
    color: #7A0C2E;
  }
  .sovo-section-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 1rem;
  }
  .sovo-table {
    width: 100%;
    font-size: 0.875rem;
    border-collapse: collapse;
  }
  .sovo-table thead {
    background: #f9fafb;
    border-bottom: 2px solid #e5e7eb;
  }
  .sovo-table th {
    padding: 0.75rem 0.5rem;
    text-align: left;
    font-weight: 600;
    color: #6b7280;
    font-size: 0.75rem;
    text-transform: uppercase;
  }
  .sovo-table td {
    padding: 0.75rem 0.5rem;
    border-bottom: 1px solid #e5e7eb;
    vertical-align: top;
  }
  .sovo-table input, .sovo-table select, .sovo-table textarea {
    padding: 0.5rem;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 0.875rem;
    width: 100%;
  }
  .sovo-table input:focus, .sovo-table select:focus, .sovo-table textarea:focus {
    outline: none;
    border-color: #7A0C2E;
  }
  .sovo-badge-success {
    display: inline-block;
    padding: 0.25rem 0.625rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 500;
    background: #d1fae5;
    color: #065f46;
  }
  .sovo-badge-warning {
    display: inline-block;
    padding: 0.25rem 0.625rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 500;
    background: #fef3c7;
    color: #92400e;
  }
  .sovo-info-box {
    background: #f9fafb;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 1rem;
  }

  /* Mobile responsive styles */
  @media (max-width: 768px) {
    .sovo-card {
      padding: 1rem;
      margin-bottom: 1rem;
    }
    .sovo-section-title {
      font-size: 1.125rem;
    }
    /* Hide table on mobile, use card layout */
    .sovo-table thead {
      display: none;
    }
    .sovo-table, .sovo-table tbody, .sovo-table tr {
      display: block;
      width: 100%;
    }
    .sovo-table tr {
      margin-bottom: 1rem;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      padding: 0.75rem;
      background: white;
    }
    .sovo-table td {
      display: block;
      padding: 0.5rem 0;
      border: none;
    }
    .sovo-table td:before {
      content: attr(data-label);
      font-weight: 600;
      display: block;
      margin-bottom: 0.25rem;
      color: #6b7280;
      font-size: 0.75rem;
      text-transform: uppercase;
    }
    .mobile-hidden {
      display: none;
    }
  }
</style>

<div class="max-w-5xl mx-auto">
  <form action="/wniosek/podsumowanie" method="post" enctype="multipart/form-data" class="space-y-6">

    <!-- HEADER -->
    <div class="sovo-card">
      <h1 class="text-2xl md:text-3xl font-bold text-gray-800 mb-2">Wniosek o wprowadzenie zmian lokatorskich</h1>
      <p class="text-gray-600 text-sm md:text-base">Wypełnij formularz, dołącz rysunki z zaznaczonymi zmianami, a my przygotujemy analizę i wycenę.</p>
    </div>

    <!-- DANE OSOBOWE -->
    <div class="sovo-card">
      <h2 class="sovo-section-title">Dane kontaktowe</h2>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label class="sovo-label">Imię i nazwisko Kupującego <span class="text-red-600">*</span></label>
          <input name="buyerName" required class="sovo-input" placeholder="Jan Kowalski" />
        </div>

        <div>
          <label class="sovo-label">Numer lokalu <span class="text-red-600">*</span></label>
          <input name="unitNumber" required class="sovo-input" placeholder="np. A12, 3B, 104" />
        </div>
      </div>

      <!-- KARTA LOKALU -->
      <div class="mt-4">
        <div class="flex items-center gap-2 mb-2">
          <label class="sovo-label mb-0">Karta lokalu</label>
          <button type="button" id="rulesInfoBtn"
                  class="w-5 h-5 rounded-full border border-gray-400 text-xs flex items-center justify-center text-gray-600 hover:bg-gray-100"
                  aria-label="Zasady nanoszenia zmian" title="Zasady nanoszenia zmian">i</button>
        </div>

        <input id="kartaInfo" readonly class="sovo-input bg-gray-50 text-gray-600 cursor-not-allowed"
               value="Po uzupełnieniu numeru lokalu pojawi się karta lokalu do pobrania i podglądu. Na karcie należy nanoszyć zmiany zgodnie z zasadami." />

        <div class="mt-2 flex flex-wrap items-center gap-2">
          <a id="kartaDownload" class="sovo-btn-small pointer-events-none opacity-50" target="_blank" rel="noopener">Pobierz PDF</a>
          <button type="button" id="kartaPreviewBtn" class="sovo-btn-small pointer-events-none opacity-50">Podgląd</button>
          <span id="kartaFilename" class="text-xs text-gray-500"></span>
        </div>

        <div id="kartaPreview" class="mt-3 hidden">
          <object id="kartaObject" data="" type="application/pdf" class="w-full h-96 border rounded-lg">
            <div class="p-3 text-sm">
              Nie udało się wczytać podglądu. <a id="kartaFallback" class="underline text-sovo-burgundy" target="_blank" rel="noopener">Otwórz w nowej karcie</a>.
            </div>
          </object>
        </div>

        <!-- Tooltip z zasadami -->
        <div id="rulesTooltip" class="hidden mt-2 sovo-info-box">
          <div class="font-semibold mb-2 text-gray-800">Zasady nanoszenia zmian</div>
          <ul class="list-disc pl-5 space-y-1 text-sm text-gray-700">
            <li>Dołączenie rysunków jest obowiązkowe — bez nich wniosek nie zostanie rozpatrzony.</li>
            <li>Oznaczenia na kartach technicznych lokalu:
              <ul class="list-disc pl-5 mt-1">
                <li>Usunięcie elementu — <span class="font-semibold text-red-600">kolor czerwony</span></li>
                <li>Dodanie elementu — <span class="font-semibold text-green-600">kolor zielony</span></li>
                <li>Przesunięcie / zmiana lokalizacji — <span class="font-semibold text-blue-600">kolor niebieski</span></li>
              </ul>
            </li>
            <li>Zmiany instalacyjne (wod-kan, elektryczne, teletechniczne) muszą mieć podane odległości:
              od narożnika najbliższej ściany oraz od posadzki do centralnego punktu instalacji.</li>
          </ul>
        </div>
      </div>

      <!-- ADRES KORESPONDENCYJNY -->
      <div class="mt-4">
        <label class="sovo-label">Adres korespondencyjny</label>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <input name="addressStreet" class="sovo-input" placeholder="Ulica i nr" />
          </div>
          <div>
            <input name="addressZip" class="sovo-input" placeholder="00-000" />
          </div>
          <div>
            <input name="addressCity" class="sovo-input" placeholder="Miejscowość" />
          </div>
        </div>
      </div>

      <!-- EMAIL I TELEFON -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
        <div>
          <label class="sovo-label">Adres e-mail <span class="text-red-600">*</span></label>
          <input name="email" type="email" required class="sovo-input" placeholder="jan.kowalski@example.com" />
        </div>
        <div>
          <label class="sovo-label">Telefon</label>
          <input name="phone" class="sovo-input" placeholder="+48 123 456 789" />
        </div>
      </div>
    </div>

    <!-- ZMIANY W LOKALU -->
    <div class="sovo-card">
      <div class="flex flex-col md:flex-row md:items-center justify-between gap-3 mb-4">
        <h2 class="sovo-section-title mb-0">Zmiany w lokalu</h2>
        <button type="button" id="addRow" class="sovo-btn-secondary">+ Dodaj pozycję</button>
      </div>

      <div class="overflow-x-auto -mx-4 md:mx-0">
        <div class="min-w-full inline-block align-middle px-4 md:px-0">
          <table class="sovo-table">
            <thead>
              <tr>
                <th>Pomieszczenie</th>
                <th>Branża</th>
                <th style="width: 30%">Opis / Kod cennika</th>
                <th style="width: 80px">Jedn.</th>
                <th style="width: 100px">Ilość</th>
                <th style="width: 120px">Status</th>
                <th style="width: 130px">Cena (netto)</th>
                <th style="width: 60px"></th>
              </tr>
            </thead>
            <tbody id="rows"></tbody>
          </table>
        </div>
      </div>

      <input type="hidden" name="items" id="itemsJson" />
    </div>

    <!-- ORIENTACYJNA WYCENA -->
    <div class="sovo-card bg-gray-50 border border-gray-200">
      <h2 class="sovo-section-title">Orientacyjna wycena</h2>
      <p class="text-xs text-gray-600 mb-4">Kalkulacja wstępna na podstawie aktualnego cennika. Elementy bez automatycznej wyceny oznaczamy jako „Do analizy Działu Technicznego". Finalny kosztorys wyślemy e-mailem po analizie.</p>

      <div id="estBox" class="space-y-2">
        <div class="flex justify-between text-gray-700">
          <span>Suma netto</span>
          <span id="sumNetto" class="font-semibold">0,00 zł</span>
        </div>
        <div class="flex justify-between text-gray-700">
          <span>VAT 23%</span>
          <span id="sumVat" class="font-semibold">0,00 zł</span>
        </div>
        <div class="flex justify-between text-lg font-bold text-gray-900 pt-2 border-t border-gray-300">
          <span>Suma brutto</span>
          <span id="sumBrutto">0,00 zł</span>
        </div>
        <div class="text-xs text-amber-700 mt-2" id="manualInfo" style="display:none;"></div>
      </div>
    </div>

    <!-- ZAŁĄCZNIKI -->
    <div class="sovo-card bg-gray-50 border border-gray-200">
      <label class="sovo-label">
        Załącz rysunki / pliki (PDF/JPG/PNG)
        <span class="text-red-600">*</span>
      </label>
      <p class="text-xs text-gray-600 mb-3">
        <strong>Obowiązkowe:</strong> Karta lokalu z zaznaczonymi zmianami zgodnie z zasadami składania wniosku. Max 10 plików, 15MB każdy.
      </p>

      <input id="attachmentsInput" type="file" name="attachments" multiple accept=".pdf,.jpg,.jpeg,.png" class="hidden" />

      <div class="flex flex-col sm:flex-row items-start sm:items-center gap-2">
        <button type="button" id="pickFiles" class="sovo-btn-small">+ Dodaj plik</button>
        <div id="attachError" class="text-sm text-red-600"></div>
      </div>

      <ul id="filesList" class="mt-3 space-y-2"></ul>
      <input id="pickerHidden" type="file" multiple accept=".pdf,.jpg,.jpeg,.png" class="hidden" />
    </div>

    <!-- ZASADY -->
    <div class="sovo-card">
      <h2 class="sovo-section-title">Zasady składania wniosku</h2>
      <ul class="list-disc pl-5 space-y-2 text-sm text-gray-700">
        <li>Wszystkie zmiany muszą być precyzyjnie opisane.</li>
        <li>Dołączenie rysunków jest obowiązkowe — bez nich wniosek nie zostanie rozpatrzony.</li>
        <li>
          Wszelkie zmiany powinny być oznaczone na kartach technicznych lokalu zgodnie z zasadami:
          <ul class="list-disc pl-5 mt-1">
            <li>Usunięcie elementu — <span class="font-semibold text-red-600">kolor czerwony</span></li>
            <li>Dodanie elementu — <span class="font-semibold text-green-600">kolor zielony</span></li>
            <li>Przesunięcie lub zmiana lokalizacji — <span class="font-semibold text-blue-600">kolor niebieski</span></li>
          </ul>
        </li>
        <li>W przypadku zmian instalacyjnych (wodno-kanalizacyjnych, elektrycznych, teletechnicznych) należy podać dokładne odległości: od narożnika najbliższej ściany oraz od posadzki do centralnego punktu instalacji.</li>
      </ul>
    </div>

    <!-- ZGODY -->
    <div class="sovo-card">
      <div class="space-y-3">
        <label class="flex gap-3 items-start cursor-pointer">
          <input type="checkbox" required class="mt-1 w-4 h-4 text-sovo-burgundy border-gray-300 rounded" />
          <span class="text-sm text-gray-700">Oświadczam, że zapoznałem/am się z regulaminem wprowadzania zmian lokatorskich oraz cennikami i akceptuję ich treść.</span>
        </label>
        <label class="flex gap-3 items-start cursor-pointer">
          <input type="checkbox" required class="mt-1 w-4 h-4 text-sovo-burgundy border-gray-300 rounded" />
          <span class="text-sm text-gray-700">Przyjmuję do wiadomości, że przedstawiona powyżej kalkulacja ma charakter wstępny, a finalny kosztorys zostanie przesłany po analizie przez Dział Techniczny.</span>
        </label>
      </div>
    </div>

    <!-- PRZYCISKI -->
    <div class="flex flex-col sm:flex-row items-stretch sm:items-center justify-end gap-3">
      <a href="/" class="sovo-btn-secondary text-center">Anuluj</a>
      <button type="submit" class="sovo-btn-primary text-center">Wyślij wniosek</button>
    </div>
  </form>
</div>

<script>
  const form = document.querySelector('form');

  // ====== KARTA LOKALU
  const unitInput = form.elements['unitNumber'];
  const kartaInfo = document.getElementById('kartaInfo');
  const kartaDownload = document.getElementById('kartaDownload');
  const kartaPreviewBtn = document.getElementById('kartaPreviewBtn');
  const kartaPreview = document.getElementById('kartaPreview');
  const kartaObject = document.getElementById('kartaObject');
  const kartaFallback = document.getElementById('kartaFallback');
  const kartaFilename = document.getElementById('kartaFilename');

  function makeCardUrl(unit) {
    const cleaned = String(unit).trim();
    return '/karty/' + encodeURIComponent(cleaned) + '.pdf';
  }

  function setCardEnabled(enabled, url = '') {
    if (enabled) {
      kartaDownload.href = url;
      kartaFallback.href = url;
      kartaDownload.classList.remove('opacity-50','pointer-events-none');
      kartaPreviewBtn.classList.remove('opacity-50','pointer-events-none');
    } else {
      kartaDownload.removeAttribute('href');
      kartaFallback.removeAttribute('href');
      kartaDownload.classList.add('opacity-50','pointer-events-none');
      kartaPreviewBtn.classList.add('opacity-50','pointer-events-none');
      kartaPreview.classList.add('hidden');
    }
  }

  unitInput.addEventListener('input', () => {
    const val = unitInput.value.trim();
    if (!val) {
      kartaInfo.value = 'Po uzupełnieniu numeru lokalu pojawi się karta lokalu do pobrania i podglądu. Na karcie należy nanoszyć zmiany zgodnie z zasadami.';
      kartaFilename.textContent = '';
      setCardEnabled(false);
      return;
    }
    const url = makeCardUrl(val);
    kartaInfo.value = `Karta lokalu dla: ${val}`;
    kartaFilename.textContent = `(plik: ${decodeURIComponent(url.split('/').pop())})`;
    setCardEnabled(true, url);
  });

  kartaPreviewBtn.addEventListener('click', () => {
    const href = kartaDownload.getAttribute('href');
    if (!href) return;
    kartaObject.setAttribute('data', href);
    kartaPreview.classList.toggle('hidden');
  });

  const rulesInfoBtn = document.getElementById('rulesInfoBtn');
  const rulesTooltip = document.getElementById('rulesTooltip');
  rulesInfoBtn.addEventListener('click', () => {
    rulesTooltip.classList.toggle('hidden');
  });

  // ====== TABELA ZMIAN
  const rows = document.getElementById('rows');
  const add = document.getElementById('addRow');
  const itemsField = document.getElementById('itemsJson');
  const sumNetto = document.getElementById('sumNetto');
  const sumVat = document.getElementById('sumVat');
  const sumBrutto = document.getElementById('sumBrutto');
  const manualInfo = document.getElementById('manualInfo');

  const roomOpts = ['Kuchnia','Łazienka','Pokój','Sypialnia'];
  const branchOpts = ['Architektura','Konstrukcja','Instalacje elektryczne i teletechniczne','Instalacja wod-kan','Instalacja CO','Instalacja wentylacji','Naniesienie zmian'];

  const state = [];
  function sync() { itemsField.value = JSON.stringify(state); estimate(); }

  const priceListCache = {};

  async function loadPriceListForBranch(branch) {
    if (priceListCache[branch]) return priceListCache[branch];
    try {
      const res = await fetch(`/api/price-list/${encodeURIComponent(branch)}`);
      const data = await res.json();
      priceListCache[branch] = data;
      return data;
    } catch (e) {
      console.error('Failed to load price list:', e);
      return [];
    }
  }

  async function populatePriceSelect(selectEl, branch, currentCode = '') {
    selectEl.innerHTML = '<option value="">Ładowanie...</option>';
    const items = await loadPriceListForBranch(branch);

    selectEl.innerHTML = '<option value="">Wybierz pozycję z cennika...</option>';
    items.forEach(({code, item}) => {
      const opt = document.createElement('option');
      opt.value = code;
      opt.textContent = `${code} - ${item.title} (${item.unit}, ${item.price.toFixed(2)} zł)`;
      opt.dataset.unit = item.unit;
      if (code === currentCode) opt.selected = true;
      selectEl.appendChild(opt);
    });

    const otherOpt = document.createElement('option');
    otherOpt.value = 'INNE';
    otherOpt.textContent = '➕ Inne - wpisz własny opis';
    if (currentCode === 'INNE' || (!currentCode && items.length === 0)) otherOpt.selected = true;
    selectEl.appendChild(otherOpt);
  }

  function addRow(data = {}) {
    const idx = state.length;
    state.push({ room: data.room||'Kuchnia', branch: data.branch||'Architektura', code: data.code||'', description: data.description||'', unit: data.unit||'', qty: Math.max(1, Math.floor(data.qty||1)) });

    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td data-label="Pomieszczenie">
        <select class="w-full" data-k="room">${roomOpts.map(o=>`<option ${o===state[idx].room?'selected':''}>${o}</option>`).join('')}</select>
      </td>

      <td data-label="Branża">
        <select class="w-full" data-k="branch">${branchOpts.map(o=>`<option ${o===state[idx].branch?'selected':''}>${o}</option>`).join('')}</select>
      </td>

      <td data-label="Opis / Kod cennika">
        <select class="w-full" data-k="priceSelect">
          <option value="">Ładowanie...</option>
        </select>
        <textarea placeholder="Wpisz opis zmiany..." rows="2" class="w-full resize-y mt-1 hidden" data-k="customDesc"></textarea>
      </td>

      <td data-label="Jedn.">
        <input class="w-full" data-k="unit" value="${state[idx].unit}"/>
      </td>

      <td data-label="Ilość">
        <input type="number" min="1" step="1" inputmode="numeric" pattern="\\d*" class="w-full" data-k="qty" value="${state[idx].qty}"/>
      </td>

      <td data-label="Status">
        <span class="inline-block text-xs rounded-full px-2 py-1 bg-gray-100 text-gray-600" data-k="status">—</span>
      </td>

      <td data-label="Cena (netto)">
        <div class="text-right font-semibold" data-k="price">—</div>
        <div class="text-right text-xs text-gray-500" data-k="total" style="display:none;">= 0,00 zł</div>
      </td>

      <td data-label="">
        <button type="button" class="text-red-600 font-medium text-sm hover:text-red-800" data-action="del">Usuń</button>
      </td>`;

    tr.addEventListener('input', (e) => {
      const el = e.target; const k = el.getAttribute('data-k');
      const v = el.value; const s = state[idx];
      if (k === 'room') s.room = v;
      else if (k === 'branch') {
        s.branch = v;
        const priceSelect = tr.querySelector('[data-k="priceSelect"]');
        populatePriceSelect(priceSelect, v, s.code);
      }
      else if (k === 'priceSelect') {
        const customDesc = tr.querySelector('[data-k="customDesc"]');
        const unitInput = tr.querySelector('[data-k="unit"]');

        if (v === 'INNE') {
          customDesc.classList.remove('hidden');
          s.code = '';
          s.description = customDesc.value;
          s.unit = unitInput.value || '';
        } else if (v) {
          customDesc.classList.add('hidden');
          s.code = v;
          s.description = '';
          const selectedOption = el.options[el.selectedIndex];
          const unit = selectedOption.dataset.unit || '';
          s.unit = unit;
          unitInput.value = unit;
        } else {
          customDesc.classList.add('hidden');
          s.code = '';
          s.description = '';
          s.unit = '';
          unitInput.value = '';
        }
      }
      else if (k === 'customDesc') {
        s.description = v;
        s.code = '';
      }
      else if (k === 'unit') s.unit = v;
      else if (k === 'qty') {
        const n = Math.floor(Number(v) || 0);
        s.qty = Math.max(1, n);
        el.value = String(s.qty);
      }
      sync();
    });

    tr.addEventListener('click', (e) => {
      const btn = e.target.closest('[data-action="del"]');
      if (!btn) return;
      state.splice(idx,1);
      tr.remove();
      sync();
    });

    rows.appendChild(tr);

    const priceSelect = tr.querySelector('[data-k="priceSelect"]');
    populatePriceSelect(priceSelect, state[idx].branch, state[idx].code);

    if (!state[idx].code && state[idx].description) {
      const customDesc = tr.querySelector('[data-k="customDesc"]');
      customDesc.classList.remove('hidden');
      customDesc.value = state[idx].description;
      priceSelect.value = 'INNE';
    }

    sync();
  }

  async function estimate() {
    try {
      const res = await fetch('/api/estimate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: new URLSearchParams({ items: JSON.stringify(state) })
      });
      const data = await res.json();

      sumNetto.textContent = (data.subtotal || 0).toFixed(2) + ' zł';
      sumVat.textContent = (data.vat || 0).toFixed(2) + ' zł';
      sumBrutto.textContent = (data.total || 0).toFixed(2) + ' zł';

      const statuses = document.querySelectorAll('[data-k="status"]');
      const prices = document.querySelectorAll('[data-k="price"]');
      const totals = document.querySelectorAll('[data-k="total"]');

      (data.rows || []).forEach((r, i) => {
        const s = statuses[i];
        if (s) {
          if (r.manual) {
            s.textContent = 'Do analizy';
            s.className='sovo-badge-warning';
          }
          else {
            s.textContent = 'Wycenione';
            s.className='sovo-badge-success';
          }
        }

        const p = prices[i];
        const t = totals[i];
        if (p && t) {
          if (r.manual || !r.unitPrice) {
            p.textContent = '—';
            t.style.display = 'none';
          } else {
            p.textContent = r.unitPrice.toFixed(2) + ' zł';
            if (r.lineTotal && Number.isFinite(r.lineTotal)) {
              t.textContent = '= ' + r.lineTotal.toFixed(2) + ' zł';
              t.style.display = 'block';
            } else {
              t.style.display = 'none';
            }
          }
        }
      });

      manualInfo.style.display = data.manualCount > 0 ? 'block' : 'none';
      if (data.manualCount > 0) manualInfo.textContent = `Pozycji do analizy technicznej: ${data.manualCount}.`;
    } catch(e) { console.error(e); }
  }

  // ====== ZAŁĄCZNIKI
  const attachmentsInput = document.getElementById('attachmentsInput');
  const pickFilesBtn = document.getElementById('pickFiles');
  const pickerHidden = document.getElementById('pickerHidden');
  const filesList = document.getElementById('filesList');
  const attachError = document.getElementById('attachError');

  const ATTACH_MAX_FILES = 10;
  const ATTACH_MAX_SIZE = 15 * 1024 * 1024;
  let attachments = [];

  function renderFiles() {
    filesList.innerHTML = '';
    if (attachments.length === 0) {
      filesList.innerHTML = '<li class="text-gray-500 text-sm">Brak załączników</li>';
      return;
    }
    attachments.forEach((f, i) => {
      const li = document.createElement('li');
      li.className = 'flex items-center justify-between gap-3 border border-gray-200 rounded-lg bg-white px-3 py-2';
      li.innerHTML = `
        <div class="truncate flex-1">
          <div class="font-medium truncate text-sm">${f.name}</div>
          <div class="text-xs text-gray-500">${(f.size/1024/1024).toFixed(2)} MB</div>
        </div>
        <button type="button" class="text-red-600 font-medium text-sm hover:text-red-800" data-remove="${i}">Usuń</button>
      `;
      li.querySelector('[data-remove]').addEventListener('click', () => {
        attachments.splice(i, 1);
        syncFileInput();
        renderFiles();
      });
      filesList.appendChild(li);
    });
  }

  function syncFileInput() {
    const dt = new DataTransfer();
    attachments.forEach(f => dt.items.add(f));
    attachmentsInput.files = dt.files;
  }

  function canAddFiles(newFiles) {
    attachError.textContent = '';
    if (attachments.length + newFiles.length > ATTACH_MAX_FILES) {
      attachError.textContent = `Maksymalnie ${ATTACH_MAX_FILES} plików.`;
      return false;
    }
    for (const f of newFiles) {
      if (f.size > ATTACH_MAX_SIZE) {
        attachError.textContent = `Plik ${f.name} przekracza 15MB.`;
        return false;
      }
    }
    for (const f of newFiles) {
      const okExt = /\.(pdf|jpg|jpeg|png)$/i.test(f.name);
      const okType = /pdf|jpeg|jpg|png/i.test(f.type);
      if (!okExt && !okType) {
        attachError.textContent = `Niedozwolony format pliku: ${f.name}`;
        return false;
      }
    }
    return true;
  }

  pickFilesBtn.addEventListener('click', () => {
    pickerHidden.value = '';
    pickerHidden.click();
  });

  pickerHidden.addEventListener('change', (e) => {
    const files = Array.from(e.target.files || []);
    if (!files.length) return;
    if (!canAddFiles(files)) return;

    const existingKeys = new Set(attachments.map(f => `${f.name.toLowerCase()}::${f.size}`));
    const toAdd = files.filter(f => !existingKeys.has(`${f.name.toLowerCase()}::${f.size}`));

    attachments = attachments.concat(toAdd);
    syncFileInput();
    renderFiles();
  });

  // ====== WALIDACJA
  form.addEventListener('submit', (e) => {
    if (attachments.length === 0) {
      e.preventDefault();
      e.stopPropagation();

      attachError.textContent = 'Musisz dodać przynajmniej jeden plik - Kartę lokalu z zaznaczonymi zmianami zgodnie z zasadami składania wniosku.';
      attachError.classList.add('font-bold');

      document.getElementById('attachmentsInput').scrollIntoView({ behavior: 'smooth', block: 'center' });

      return false;
    }
  });

  // ====== START
  add.addEventListener('click', () => addRow());
  addRow();
  renderFiles();
</script>
<%- include('partials/footer') %>
