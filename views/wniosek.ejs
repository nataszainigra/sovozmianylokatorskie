<%- include('partials/header') %>
<form action="/wniosek/podsumowanie" method="post" enctype="multipart/form-data" class="space-y-6">
  <h1 class="text-2xl font-semibold">Wniosek o wprowadzenie zmian lokatorskich</h1>

  <div class="grid sm:grid-cols-2 gap-4">
    <div>
      <label class="block text-sm font-medium">Imię i nazwisko Kupującego</label>
      <input name="buyerName" required class="mt-1 w-full rounded-md border px-3 py-2" />
    </div>

    <div>
      <label class="block text-sm font-medium">Numer lokalu</label>
      <input name="unitNumber" required class="mt-1 w-full rounded-md border px-3 py-2" placeholder="np. A12, 3B, 104" />
    </div>

    <!-- KARTA LOKALU (powiązana z numerem lokalu) -->
    <div class="sm:col-span-2">
      <div class="flex items-center gap-2">
        <label class="block text-sm font-medium">Karta lokalu</label>

        <!-- Dymek z zasadami -->
        <button type="button" id="rulesInfoBtn" class="shrink-0 w-5 h-5 rounded-full border text-xs leading-4 flex items-center justify-center"
                aria-label="Zasady nanoszenia zmian" title="Zasady nanoszenia zmian">i</button>
      </div>

      <!-- placeholder / info -->
      <input id="kartaInfo" readonly class="mt-1 w-full rounded-md border px-3 py-2 text-zinc-600 bg-zinc-50"
             value="Po uzupełnieniu numeru lokalu pojawi się karta lokalu do pobrania i podglądu. Na karcie należy nanoszyć zmiany zgodnie z zasadami." />

      <!-- akcje -->
      <div class="mt-2 flex flex-wrap items-center gap-2">
        <a id="kartaDownload" class="px-3 py-1.5 rounded-md border pointer-events-none opacity-50" target="_blank" rel="noopener">Pobierz PDF</a>
        <button type="button" id="kartaPreviewBtn" class="px-3 py-1.5 rounded-md border pointer-events-none opacity-50">Podgląd</button>
        <span id="kartaFilename" class="text-xs text-zinc-500"></span>
      </div>

      <!-- podgląd PDF (toggle) -->
      <div id="kartaPreview" class="mt-3 hidden">
        <object id="kartaObject" data="" type="application/pdf" class="w-full h-96 border rounded-md">
          <div class="p-3 text-sm">
            Nie udało się wczytać podglądu. <a id="kartaFallback" class="underline" target="_blank" rel="noopener">Otwórz w nowej karcie</a>.
          </div>
        </object>
      </div>

      <!-- tooltip / dymek z zasadami -->
      <div id="rulesTooltip" class="hidden mt-2 text-sm border rounded-md p-3 bg-white shadow-sm">
        <div class="font-medium mb-1">Zasady nanoszenia zmian</div>
        <ul class="list-disc pl-5 space-y-1">
          <li>Dołączenie rysunków jest obowiązkowe — bez nich wniosek nie zostanie rozpatrzony.</li>
          <li>Oznaczenia na kartach technicznych lokalu:
            <ul class="list-disc pl-5 mt-1">
              <li>Usunięcie elementu — <span class="font-medium text-red-600">kolor czerwony</span></li>
              <li>Dodanie elementu — <span class="font-medium text-green-600">kolor zielony</span></li>
              <li>Przesunięcie / zmiana lokalizacji — <span class="font-medium text-blue-600">kolor niebieski</span></li>
            </ul>
          </li>
          <li>Zmiany instalacyjne (wod-kan, elektryczne, teletechniczne) muszą mieć podane odległości:
            od narożnika najbliższej ściany oraz od posadzki do centralnego punktu instalacji.</li>
        </ul>
      </div>
    </div>

    <!-- Adres korespondencyjny (3 pola) -->
    <div class="sm:col-span-2 grid sm:grid-cols-3 gap-4">
      <div>
        <label class="block text-sm font-medium">Ulica i nr</label>
        <input name="addressStreet" class="mt-1 w-full rounded-md border px-3 py-2" />
      </div>
      <div>
        <label class="block text-sm font-medium">Kod pocztowy</label>
        <input name="addressZip" class="mt-1 w-full rounded-md border px-3 py-2" placeholder="00-000" />
      </div>
      <div>
        <label class="block text-sm font-medium">Miejscowość</label>
        <input name="addressCity" class="mt-1 w-full rounded-md border px-3 py-2" />
      </div>
    </div>

    <div>
      <label class="block text-sm font-medium">Adres e-mail</label>
      <input name="email" type="email" required class="mt-1 w-full rounded-md border px-3 py-2" />
    </div>
    <div>
      <label class="block text-sm font-medium">Telefon</label>
      <input name="phone" class="mt-1 w-full rounded-md border px-3 py-2" />
    </div>
  </div>

  <div class="p-4 border rounded-md">
    <div class="flex items-center justify-between gap-2">
      <h2 class="font-medium">Zmiany w lokalu</h2>
      <button type="button" id="addRow" class="px-3 py-1.5 rounded-md border">Dodaj pozycję</button>
    </div>

    <table class="w-full mt-3 text-sm">
      <thead class="text-left text-zinc-600">
        <tr>
          <th class="py-2 pr-2">Pomieszczenie</th>
          <th class="py-2 pr-2">Branża</th>
          <th class="py-2 pr-2 w-[30%]">Opis / Kod cennika</th>
          <th class="py-2 pr-2 w-20">Jedn.</th>
          <th class="py-2 pr-2 w-24">Ilość</th>
          <th class="py-2 pr-2 w-28">Status</th>
          <th class="py-2 pr-2 w-32">Cena (netto)</th>
          <th class="py-2 pr-2 w-16"></th>
        </tr>
      </thead>
      <tbody id="rows"></tbody>
    </table>

    <input type="hidden" name="items" id="itemsJson" />
  </div>

  <!-- ORIENTACYJNA WYCENA przeniesiona POD tabelę -->
  <div class="p-4 border rounded-md bg-zinc-50">
    <div class="font-medium text-lg">Orientacyjna wycena</div>
    <div class="text-xs text-zinc-600">Kalkulacja wstępna na podstawie aktualnego cennika. Elementy bez automatycznej wyceny oznaczamy jako „Do analizy Działu Technicznego”. Finalny kosztorys wyślemy e-mailem po analizie.</div>
    <div id="estBox" class="mt-3 space-y-1 text-sm">
      <div class="flex justify-between"><span>Suma netto</span><span id="sumNetto">0,00 zł</span></div>
      <div class="flex justify-between"><span>VAT 23%</span><span id="sumVat">0,00 zł</span></div>
      <div class="flex justify-between font-semibold"><span>Suma brutto</span><span id="sumBrutto">0,00 zł</span></div>
      <div class="text-xs text-amber-600 mt-2" id="manualInfo" style="display:none;"></div>
    </div>
  </div>

  <!-- MENEDŻER ZAŁĄCZNIKÓW -->
  <div class="p-4 border rounded-md bg-zinc-50">
    <label class="block text-sm font-medium mb-2">
      Załącz rysunki / pliki (PDF/JPG/PNG) – max 10 plików, 15MB każdy
      <span class="text-red-600">*</span>
    </label>
    <p class="text-xs text-zinc-600 mb-3">
      <strong>Obowiązkowe:</strong> Karta lokalu z zaznaczonymi zmianami zgodnie z zasadami składania wniosku
    </p>

    <!-- Ukryty natywny input, który faktycznie zostanie wysłany (zasilany DataTransferem) -->
    <input id="attachmentsInput" type="file" name="attachments" multiple accept=".pdf,.jpg,.jpeg,.png" class="hidden" />

    <div class="flex items-center gap-2">
      <button type="button" id="pickFiles" class="px-3 py-1.5 rounded-md border">Dodaj plik</button>
      <div id="attachError" class="text-sm text-red-600"></div>
    </div>

    <ul id="filesList" class="mt-3 space-y-2 text-sm"></ul>

    <!-- Tymczasowy picker tylko do wyboru nowych plików -->
    <input id="pickerHidden" type="file" multiple accept=".pdf,.jpg,.jpeg,.png" class="hidden" />
  </div>

  <!-- ZASADY SKŁADANIA WNIOSKU (ogólne) -->
  <section class="p-4 border rounded-md bg-white">
    <h2 class="font-medium mb-2">Zasady składania wniosku</h2>
    <ul class="list-disc pl-5 space-y-1 text-sm">
      <li>Wszystkie zmiany muszą być precyzyjnie opisane.</li>
      <li>Dołączenie rysunków jest obowiązkowe — bez nich wniosek nie zostanie rozpatrzony.</li>
      <li>
        Wszelkie zmiany powinny być oznaczone na kartach technicznych lokalu zgodnie z zasadami:
        <ul class="list-disc pl-5 mt-1">
          <li>Usunięcie elementu — <span class="font-medium text-red-600">kolor czerwony</span>,</li>
          <li>Dodanie elementu — <span class="font-medium text-green-600">kolor zielony</span>,</li>
          <li>Przesunięcie lub zmiana lokalizacji — <span class="font-medium text-blue-600">kolor niebieski</span>.</li>
        </ul>
      </li>
      <li>W przypadku zmian instalacyjnych (wodno-kanalizacyjnych, elektrycznych, teletechnicznych) należy podać dokładne odległości: od narożnika najbliższej ściany oraz od posadzki do centralnego punktu instalacji.</li>
    </ul>
  </section>

  <fieldset class="space-y-2 text-sm">
    <label class="flex gap-2 items-start"><input type="checkbox" required class="mt-1" /> <span>Oświadczam, że zapoznałem/am się z regulaminem wprowadzania zmian lokatorskich oraz cennikami i akceptuję ich treść.</span></label>
    <label class="flex gap-2 items-start"><input type="checkbox" required class="mt-1" /> <span>Przyjmuję do wiadomości, że przedstawiona powyżej kalkulacja ma charakter wstępny, a finalny kosztorys zostanie przesłany po analizie przez Dział Techniczny.</span></label>
  </fieldset>

  <div class="flex items-center justify-end gap-3">
    <a href="/" class="px-4 py-2 rounded-md border">Anuluj</a>
    <button class="px-4 py-2 rounded-md bg-zinc-900 text-white">Wyślij wniosek</button>
  </div>
</form>

<script>
  const form = document.querySelector('form');

  // ====== KARTA LOKALU
  const unitInput = form.elements['unitNumber'];
  const kartaInfo = document.getElementById('kartaInfo');
  const kartaDownload = document.getElementById('kartaDownload');
  const kartaPreviewBtn = document.getElementById('kartaPreviewBtn');
  const kartaPreview = document.getElementById('kartaPreview');
  const kartaObject = document.getElementById('kartaObject');
  const kartaFallback = document.getElementById('kartaFallback');
  const kartaFilename = document.getElementById('kartaFilename');

  function makeCardUrl(unit) {
    // Dostosuj, jeśli masz inną ścieżkę
    const cleaned = String(unit).trim();
    return '/karty/' + encodeURIComponent(cleaned) + '.pdf';
  }

  function setCardEnabled(enabled, url = '') {
    if (enabled) {
      kartaDownload.href = url;
      kartaFallback.href = url;
      kartaDownload.classList.remove('opacity-50','pointer-events-none');
      kartaPreviewBtn.classList.remove('opacity-50','pointer-events-none');
    } else {
      kartaDownload.removeAttribute('href');
      kartaFallback.removeAttribute('href');
      kartaDownload.classList.add('opacity-50','pointer-events-none');
      kartaPreviewBtn.classList.add('opacity-50','pointer-events-none');
      kartaPreview.classList.add('hidden');
    }
  }

  unitInput.addEventListener('input', () => {
    const val = unitInput.value.trim();
    if (!val) {
      kartaInfo.value = 'Po uzupełnieniu numeru lokalu pojawi się karta lokalu do pobrania i podglądu. Na karcie należy nanoszyć zmiany zgodnie z zasadami.';
      kartaFilename.textContent = '';
      setCardEnabled(false);
      return;
    }
    const url = makeCardUrl(val);
    kartaInfo.value = `Karta lokalu dla: ${val}`;
    kartaFilename.textContent = `(plik: ${decodeURIComponent(url.split('/').pop())})`;
    setCardEnabled(true, url);
  });

  kartaPreviewBtn.addEventListener('click', () => {
    // pokaż/ukryj podgląd
    const href = kartaDownload.getAttribute('href');
    if (!href) return;
    kartaObject.setAttribute('data', href);
    kartaPreview.classList.toggle('hidden');
  });

  // Dymek / zasady (toggle)
  const rulesInfoBtn = document.getElementById('rulesInfoBtn');
  const rulesTooltip = document.getElementById('rulesTooltip');
  rulesInfoBtn.addEventListener('click', () => {
    rulesTooltip.classList.toggle('hidden');
  });

  // ====== ELEMENTY FORMULARZA (tabela)
  const rows = document.getElementById('rows');
  const add = document.getElementById('addRow');
  const itemsField = document.getElementById('itemsJson');
  const sumNetto = document.getElementById('sumNetto');
  const sumVat = document.getElementById('sumVat');
  const sumBrutto = document.getElementById('sumBrutto');
  const manualInfo = document.getElementById('manualInfo');

  const roomOpts = ['Kuchnia','Łazienka','Pokój','Sypialnia'];
  const branchOpts = ['Architektura','Konstrukcja','Instalacje elektryczne i teletechniczne','Instalacja wod-kan','Instalacja CO','Instalacja wentylacji','Naniesienie zmian'];

  const state = [];
  function sync() { itemsField.value = JSON.stringify(state); estimate(); }

  // Cache cennika dla branż
  const priceListCache = {};

  async function loadPriceListForBranch(branch) {
    if (priceListCache[branch]) return priceListCache[branch];
    try {
      const res = await fetch(`/api/price-list/${encodeURIComponent(branch)}`);
      const data = await res.json();
      priceListCache[branch] = data;
      return data;
    } catch (e) {
      console.error('Failed to load price list:', e);
      return [];
    }
  }

  async function populatePriceSelect(selectEl, branch, currentCode = '') {
    selectEl.innerHTML = '<option value="">Ładowanie...</option>';
    const items = await loadPriceListForBranch(branch);

    selectEl.innerHTML = '<option value="">Wybierz pozycję z cennika...</option>';
    items.forEach(({code, item}) => {
      const opt = document.createElement('option');
      opt.value = code;
      opt.textContent = `${code} - ${item.title} (${item.unit}, ${item.price.toFixed(2)} zł)`;
      opt.dataset.unit = item.unit; // Store unit in data attribute
      if (code === currentCode) opt.selected = true;
      selectEl.appendChild(opt);
    });

    const otherOpt = document.createElement('option');
    otherOpt.value = 'INNE';
    otherOpt.textContent = '➕ Inne - wpisz własny opis';
    if (currentCode === 'INNE' || (!currentCode && items.length === 0)) otherOpt.selected = true;
    selectEl.appendChild(otherOpt);
  }

  function addRow(data = {}) {
    const idx = state.length;
    state.push({ room: data.room||'Kuchnia', branch: data.branch||'Architektura', code: data.code||'', description: data.description||'', unit: data.unit||'', qty: Math.max(1, Math.floor(data.qty||1)) });

    const tr = document.createElement('tr');
    tr.className = 'border-t align-top';
    tr.innerHTML = `
      <td class="py-2 pr-2">
        <select class="border rounded-md px-2 py-1" data-k="room">${roomOpts.map(o=>`<option ${o===state[idx].room?'selected':''}>${o}</option>`).join('')}</select>
      </td>

      <td class="py-2 pr-2">
        <select class="border rounded-md px-2 py-1" data-k="branch">${branchOpts.map(o=>`<option ${o===state[idx].branch?'selected':''}>${o}</option>`).join('')}</select>
      </td>

      <td class="py-2 pr-2 w-[30%]">
        <select class="border rounded-md px-2 py-1 w-full" data-k="priceSelect">
          <option value="">Ładowanie...</option>
        </select>
        <textarea placeholder="Wpisz opis zmiany..." rows="2" class="border rounded-md px-2 py-1 w-full resize-y mt-1 hidden" data-k="customDesc"></textarea>
      </td>

      <td class="py-2 pr-2 w-20">
        <input class="border rounded-md px-2 py-1 w-full" data-k="unit" value="${state[idx].unit}"/>
      </td>

      <td class="py-2 pr-2 w-24">
        <input type="number" min="1" step="1" inputmode="numeric" pattern="\\d*" class="border rounded-md px-2 py-1 w-full" data-k="qty" value="${state[idx].qty}"/>
      </td>

      <td class="py-2 pr-2 w-28">
        <span class="inline-block text-xs rounded px-2 py-1 bg-zinc-100 text-zinc-600" data-k="status">—</span>
      </td>

      <td class="py-2 pr-2 w-32">
        <div class="text-right font-medium" data-k="price">—</div>
        <div class="text-right text-[11px] text-zinc-500" data-k="total" style="display:none;">= 0,00 zł</div>
      </td>

      <td class="py-2 pr-2 text-right w-16">
        <button type="button" class="text-red-600" data-action="del">Usuń</button>
      </td>`;

    tr.addEventListener('input', (e) => {
      const el = e.target; const k = el.getAttribute('data-k');
      const v = el.value; const s = state[idx];
      if (k === 'room') s.room = v;
      else if (k === 'branch') {
        s.branch = v;
        // Reload price list for new branch
        const priceSelect = tr.querySelector('[data-k="priceSelect"]');
        populatePriceSelect(priceSelect, v, s.code);
      }
      else if (k === 'priceSelect') {
        const customDesc = tr.querySelector('[data-k="customDesc"]');
        const unitInput = tr.querySelector('[data-k="unit"]');

        if (v === 'INNE') {
          // Show custom description field
          customDesc.classList.remove('hidden');
          s.code = '';
          s.description = customDesc.value;
          s.unit = unitInput.value || '';
        } else if (v) {
          // Selected from price list
          customDesc.classList.add('hidden');
          s.code = v;
          s.description = '';

          // Auto-fill unit from price list
          const selectedOption = el.options[el.selectedIndex];
          const unit = selectedOption.dataset.unit || '';
          s.unit = unit;
          unitInput.value = unit;
        } else {
          // Nothing selected
          customDesc.classList.add('hidden');
          s.code = '';
          s.description = '';
          s.unit = '';
          unitInput.value = '';
        }
      }
      else if (k === 'customDesc') {
        s.description = v;
        s.code = '';
      }
      else if (k === 'unit') s.unit = v;
      else if (k === 'qty') {
        const n = Math.floor(Number(v) || 0);
        s.qty = Math.max(1, n);
        el.value = String(s.qty);
      }
      sync();
    });

    tr.addEventListener('click', (e) => {
      const btn = e.target.closest('[data-action="del"]');
      if (!btn) return;
      state.splice(idx,1);
      tr.remove();
      sync();
    });

    rows.appendChild(tr);

    // Initialize price list dropdown
    const priceSelect = tr.querySelector('[data-k="priceSelect"]');
    populatePriceSelect(priceSelect, state[idx].branch, state[idx].code);

    // Show custom description if code is empty and description exists
    if (!state[idx].code && state[idx].description) {
      const customDesc = tr.querySelector('[data-k="customDesc"]');
      customDesc.classList.remove('hidden');
      customDesc.value = state[idx].description;
      priceSelect.value = 'INNE';
    }

    sync();
  }

  async function estimate() {
    try {
      const res = await fetch('/api/estimate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: new URLSearchParams({ items: JSON.stringify(state) })
      });
      const data = await res.json();

      sumNetto.textContent = (data.subtotal || 0).toFixed(2) + ' zł';
      sumVat.textContent = (data.vat || 0).toFixed(2) + ' zł';
      sumBrutto.textContent = (data.total || 0).toFixed(2) + ' zł';

      const statuses = document.querySelectorAll('[data-k="status"]');
      const prices = document.querySelectorAll('[data-k="price"]');
      const totals = document.querySelectorAll('[data-k="total"]');

      (data.rows || []).forEach((r, i) => {
        const s = statuses[i];
        if (s) {
          if (r.manual) { s.textContent = 'Do analizy'; s.className='inline-block text-xs rounded px-2 py-1 bg-amber-100 text-amber-700'; }
          else { s.textContent = 'Wycenione'; s.className='inline-block text-xs rounded px-2 py-1 bg-emerald-100 text-emerald-700'; }
        }

        const p = prices[i];
        const t = totals[i];
        if (p && t) {
          if (r.manual || !r.unitPrice) {
            p.textContent = '—';
            t.style.display = 'none';
          } else {
            p.textContent = r.unitPrice.toFixed(2) + ' zł';
            if (r.lineTotal && Number.isFinite(r.lineTotal)) {
              t.textContent = '= ' + r.lineTotal.toFixed(2) + ' zł';
              t.style.display = 'block';
            } else {
              t.style.display = 'none';
            }
          }
        }
      });

      manualInfo.style.display = data.manualCount > 0 ? 'block' : 'none';
      if (data.manualCount > 0) manualInfo.textContent = `Pozycji do analizy technicznej: ${data.manualCount}.`;
    } catch(e) { console.error(e); }
  }

  // ====== MENEDŻER ZAŁĄCZNIKÓW (frontend)
  const attachmentsInput = document.getElementById('attachmentsInput');
  const pickFilesBtn = document.getElementById('pickFiles');
  const pickerHidden = document.getElementById('pickerHidden');
  const filesList = document.getElementById('filesList');
  const attachError = document.getElementById('attachError');

  const ATTACH_MAX_FILES = 10;
  const ATTACH_MAX_SIZE = 15 * 1024 * 1024; // 15MB
  let attachments = []; // tablica File

  function renderFiles() {
    filesList.innerHTML = '';
    if (attachments.length === 0) {
      filesList.innerHTML = '<li class="text-zinc-500">Brak załączników</li>';
      return;
    }
    attachments.forEach((f, i) => {
      const li = document.createElement('li');
      li.className = 'flex items-center justify-between gap-3 border rounded-md bg-white px-3 py-2';
      li.innerHTML = `
        <div class="truncate">
          <div class="font-medium truncate">${f.name}</div>
          <div class="text-xs text-zinc-500">${(f.size/1024/1024).toFixed(2)} MB</div>
        </div>
        <button type="button" class="text-red-600" data-remove="${i}">Usuń</button>
      `;
      li.querySelector('[data-remove]').addEventListener('click', () => {
        attachments.splice(i, 1);
        syncFileInput();
        renderFiles();
      });
      filesList.appendChild(li);
    });
  }

  function syncFileInput() {
    const dt = new DataTransfer();
    attachments.forEach(f => dt.items.add(f));
    attachmentsInput.files = dt.files;
  }

  function canAddFiles(newFiles) {
    attachError.textContent = '';
    if (attachments.length + newFiles.length > ATTACH_MAX_FILES) {
      attachError.textContent = `Maksymalnie ${ATTACH_MAX_FILES} plików.`;
      return false;
    }
    for (const f of newFiles) {
      if (f.size > ATTACH_MAX_SIZE) {
        attachError.textContent = `Plik ${f.name} przekracza 15MB.`;
        return false;
      }
    }
    for (const f of newFiles) {
      const okExt = /\.(pdf|jpg|jpeg|png)$/i.test(f.name);
      const okType = /pdf|jpeg|jpg|png/i.test(f.type);
      if (!okExt && !okType) {
        attachError.textContent = `Niedozwolony format pliku: ${f.name}`;
        return false;
      }
    }
    return true;
  }

  pickFilesBtn.addEventListener('click', () => {
    pickerHidden.value = '';
    pickerHidden.click();
  });

  pickerHidden.addEventListener('change', (e) => {
    const files = Array.from(e.target.files || []);
    if (!files.length) return;
    if (!canAddFiles(files)) return;

    // odfiltruj proste duplikaty (nazwa+rozmiar)
    const existingKeys = new Set(attachments.map(f => `${f.name.toLowerCase()}::${f.size}`));
    const toAdd = files.filter(f => !existingKeys.has(`${f.name.toLowerCase()}::${f.size}`));

    attachments = attachments.concat(toAdd);
    syncFileInput();
    renderFiles();
  });

  // ====== WALIDACJA FORMULARZA
  form.addEventListener('submit', (e) => {
    // Sprawdź czy dodano przynajmniej jeden plik
    if (attachments.length === 0) {
      e.preventDefault();
      e.stopPropagation();

      // Pokaż komunikat błędu
      attachError.textContent = 'Musisz dodać przynajmniej jeden plik - Kartę lokalu z zaznaczonymi zmianami zgodnie z zasadami składania wniosku.';
      attachError.classList.add('font-bold');

      // Przewiń do sekcji załączników
      document.getElementById('attachmentsInput').scrollIntoView({ behavior: 'smooth', block: 'center' });

      return false;
    }
  });

  // ====== START
  add.addEventListener('click', () => addRow());
  addRow();           // pierwszy pusty wiersz
  renderFiles();      // lista załączników (pusta)
</script>
<%- include('partials/footer') %>
